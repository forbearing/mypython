1:
    1:一个类到底有什么特性,或者说到底属于什么类型,是看它里面到底实现了什么魔法函数.
    2:python 不是通过集成某一个类或者说集成某一个接口,就能有某些特性. 而是实现指定的
      魔法函数, 类就成为某种对象.
    3:在某些情况下希望判定某个对象的类型,需要用到抽象基类
    4:我们需要强制某个子类必须实现某些方法
        1:实现了一个 web 框架.集成 cache(redis, cache, memorycache)
        2:需要设计一个抽象基类, 指定子类必须实现某些方法.


2:抽象基类的定义
    不同于 Java 或者 C++, Python 中并没有直接提供 ABC. Abstract Base Class(抽象基类),
    与抽象方法,但是提供了内置模块 abc(abstract base class) 来模拟实现抽象基类. 可以
    通过 abc 将基类声明为抽象类的方式,然后注册具体类作为这个基类的实现
    
    1:抽象基类的几大特点
        - 要定义并不完整的实现所有方法
        - 基本的意思即使父类
        - 父类需要明确表示出那些方法的特征, 这样在写子类时更加简单明白
    2:用抽象基类的地方
        - 用作父类
        - 用作检验实例类型
        - 用作抛出异常说明
    3:抽象基类的作用
        1:其作用类似于 Java 中的接口. 在接口中定义各种方法,然后集成接口中的各种类进行
          具体方法的实现. 抽象基类就是定义各种方法而不做具体实现的类,任何继承基类的类
          必须实现这个方法,否则无法实例化

