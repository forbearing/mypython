基本格式 scheme://host[:port#]/path/.../[?query-string][#anchor]
	scheme: 协议
	path：访问资源的路径
	query-string：参数发送给 http 服务器的数据。
	anchor：锚（跳转到网页的指定锚点位置）

HTTP 请求主要分为两种：Get 和 Post 两种方法
	- GET 是从服务器上获取数据，POST 是向服务器传输数据
	- GET 请求参数显示，都显示在浏览器网址上，HTTP 服务器根据该请求所包含 URL 中的参数来产生
	  响应内容，即 “Get” 请求的参数是 URL 的一部分，例如 http://www.baidu.com/s?wd=Chinese
	- POST 请求参数在请求体当中，消息长度没有限制而且以隐式的方式进行发送，通常用来向 HTTP 服务器
	  提交量比较大的数据（比如请求中包含许多参数或者文件上传操作等），请求的参数包含在 
	  “Content-Type” 消息头里，指明该消息体的媒体类型和编码。
	- 避免使用 Get 方式提交表单，因为有可能会导致安全问题，比如说在登录表单中用 Get 方法，用户输入
	  的用户名和密码都将在地址栏中显示。

常用的请求报头
	1:Host（主机和端口号）
		对应网址 URL 中的 Web 名称和端口号，用于指定被请求资源的 Internet 主机和端口号，
		通常属于 URL 中的一部分。
	2:Connection（客户端与服务器端连接类型）
	3:Upgrade-Insecure-Requests（升级为 HTTPS 请求）
		升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示 https
		页面中的 http 请求报警。
	4:Accept
		指浏览器或从其他客户端可以接受的 MIME（multipurpose Internet Mail Extensions）文件类型，
		服务器可以根据它判断并返回适当的文件格式
		Accept: */*				什么都可以接受
		Accept: image/gif		客户端希望接受 GIF 图像格式的资源
		Accept: text/html		表明客户端希望接受 html 文本
		Accept: text/html, application/xhtml+xml, image/*;q=0.8
								表示浏览器支持的 MIME 类型分别是 html 文本、xhtml、xml 文档、
								所有的图像格式资源。
	5:Referer（页面跳转处）
		- Referer：表明产生请求的页面来自哪个 URL，用户是从该 Referer 页面访问到当前请求的页面。
		  这个属性可以用来跟踪 Web 请求来自哪个页面，是从什么网站来的
		- 有时候遇到下载某网站图片，需要对应的 referer，否则无法下载图片，那是因为人家做了防盗链
		  原理就是根据 referer 去判断是否是本网站的地址，如果不是，则拒绝，如果是，就可以下载
	6:Accept-Encoding（文件编码格式）
		- 指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递
		  速度。浏览器在接受到 web 响应之后先解码，然后再检查文件格式，
		  许多场景下，可以减少大量的下载时间
		- 举例：Accept-Encoding:gzip;q=1.0,identity;q=0.5,*;=0
		- 如果有多个 Encoding 同时匹配，按照 q 值顺序排列，此处按顺序支持 gzip，identity 压缩
		  编码，支持 gzip 的浏览器返回经过 gzip 编码的 HTML 页面，如果请求消息中没有设置这个
		  域服务器假定客户端对各种内容编码都可以接受
	7:Accept-Language
		浏览器可以接受的语言种类
	8:Accept-Charset（字符编码）
		- 浏览器可以接受的字符编码
		- 举例：Accept-Charset:iso-8859-1,gb232,utf-8
		- iso8859-1，通常叫做 Latin-1。Latin-1 包括了书写所有西方欧洲语言不可缺少的附加字符，
		  英文浏览器的默认值是 iso-8859-1
	10:Cookie
		浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据题体，他可以记载
		和服务器相关的用户信息，也可以用来实现会话功能
	11:Content-Type（POST 数据类型）
		- POST 请求里用来表示的内容数据）
		- Content-Type=Text/XML;charset=gb2312
		- 指明该请求的消息体中包含的是纯文本的 XML 类型的数据，字符编码采用的是 "gb2312"



常用的响应报文
	- HTTP 响应由四个部分组成：分别是：状态行、消息报头、空行、响应正文
	- 理论上所有的响应头信息都应该是回应请求的，但是服务器为了效率，安全，还会有其他方面的考虑，
	  会添加相对应额响应头信息。
	1:Cache-Control: must-revaliate,no-cache,private
		- 这个值告诉客户端，服务器不希望客户端缓存资源，下次请求资源时，必须要从新请求服务器，
		  不能从缓存副本中获取资源。
		- Cache-Control 是响应头中很重要的信息，当客户端请求头中包含 Cache-Control:max-age=0
		  请求，明确表明不会缓存服务器资源时，Cache-Control 作为回应信息，通常会返回 no-cache
		  意思是说 “那就不缓存呗”
		- 当客户端在请求头中没有包含 Cache-Control 时，服务器往往会定不同的资源不同的缓存策略，
		  比如说 oschina 在缓存服图片资源的策略就是 Cache-Control:max-age=86400，这个意思是，
		  从当前时间开始，在 86400 秒的时间内，客户端可以直接从缓存副本中读取资源，而不需要
		  从服务器请求
	2:Connection: keep-alive
	3:Content-Encoding:gzip
		告诉客户端，服务器发送的资源采用 gzip 编码，客户端看到这个信息后，应采用 gzip 对
		资源进行解码
	4:Content-Type: texthtml;charset=utf-8
		告诉客户端，资源文件的类型，还有字符编码，客户端通过 utf-8 对资源进行解码，然后对资源
		进行 html 解析。通常我们看到有些网站是乱码的，往往就是服务器端没有返回正确的编码
	5:Date
		服务器发送资源的服务器时间，GMT 是格林尼治所在地的标准时间，http 协议中发送的时间都是
		GMT。这主要是解决在互联网上，不同时区在相互请求资源的时候，时间混乱问题。
	6:Expires：
		这个响应头和缓存有关，告诉客户端在这个时间之前，可以直接访问缓存副本，很显然这个值会出
		问题，因为客户端和服务器的时间不一定会都是相同的，如果时间不同就会导致问题。所以这个
		响应头是没有 cache-control:max-age=* 
	7:Pragma:no-cache
		含义与 Cache-Control 等同
	8:Server:Tengine/1.4.6
		服务器和相对应的版本，只是告诉客户端服务器的信息。
	9:Transfer-Encoding: chunked
		这个响应头告诉客户端，服务器发送的资源的方式是分块发送的，一般分块发送的资源都是服务器
		动态发生的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块
		都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经
		传输完了。
	10:Vary: Accept-Encoding
		告诉缓存服务器，缓存压缩文件和非压缩文件两个版本，现在的这个字段的用户并不大，
		因为现在的浏览器都是支持压缩的。

响应状态码
	100-199
		服务器成功接受部分请求，要求客户端继续提交其余请求才能完成整个处理的过程
	200-299
		表示服务器成功接受请求并已完成整个处理过程。
	300-399
		为完成请求，客户端需进一步细化请求，例如：请求的资源已移动到一个新地址
		常用302（请求的页面已经临时转移至新的url）307和304（使用缓存资源）
	400-499
		客户端请求有错误，常用404（服务器无法找到被请求的页面）403（服务器拒绝访问，权限不够）
	500-599
		服务器端出现错误，常用500（请求未完成，服务器遇到不可预知的情况）

cookie 和 session
	cookie：通过在客户端记录的信息确定用户的身份
	session：通过在服务器端记录的信息确定用户的身份。
