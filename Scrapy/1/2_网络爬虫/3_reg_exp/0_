1:
	1:匹配 URL
		[a-zA-Z]+://[^\s]*


2:常见的匹配规则
	\w		匹配字母,数字及下划线
	\W		匹配不是字母,数字及下划线
	\s		匹配任意空白字符,等价于 [\t\n\r\f]
	\S		匹配任意非空字符
	\d		匹配任意数字,等价于[0-9]
	\D		匹配任意非数字的字符
	\A		匹配字符串开头
	\Z		匹配字符串结尾,如果存在换行,只匹配到换行前的结束字符串
	\z		匹配字符串结尾,如果存在换行,同时也会匹配换行符
	\G		匹配最后匹配完成的位置
	\a		匹配一个换行符
	\t		匹配一个制表符
	^		匹配一行字符串的开头
	$		匹配一行字符串的结尾
	.		匹配任意字符,除了换行符,当 re.DOTALL 标记被指定时,则可以匹配包含换行符的任意字符
	[...]	用来表示一组字符,单独列出,比如 [amk] 匹配 a, m 或 k
	[^...]	不在 [] 中的字符,比如 [^abc] 匹配了除了 a, b, c 之外的字符
	*		匹配0个或多个表达式
	+		匹配1个或多个表达式
	?		匹配0个或1个前面的正则表达式的片段,非贪婪方式
	{n}		精确匹配n个前面的表达式
	[n,m]	匹配n到m次由前面正则表达式定义的片段
	a|b		匹配a或b
	()		匹配括号内的表达式,也表示一个组

3:正则表达式不是 Python 独有的,它也可以在其他编程语言中,但是 Python 的 re 库提供了整个
  正则表达式的实现
